/*
Events

API for accessing CRM object events.

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package events

import (
	"bytes"
	"context"
	"io"
	"net/http"

	"github.com/inpher/go-hubspot"
	"net/url"
	"reflect"
	"time"
)

// EventsAPIService EventsAPI service
type EventsAPIService service

type ApiGetEventsV3EventsGetPageRequest struct {
	ctx                    context.Context
	ApiService             *EventsAPIService
	objectType             *string
	eventType              *string
	occurredAfter          *time.Time
	occurredBefore         *time.Time
	objectId               *int64
	indexTableName         *string
	indexSpecificMetadata  *string
	after                  *string
	before                 *string
	limit                  *int32
	sort                   *[]string
	objectPropertyPropname *map[string]interface{}
	propertyPropname       *map[string]interface{}
	id                     *[]string
}

func (r ApiGetEventsV3EventsGetPageRequest) ObjectType(objectType string) ApiGetEventsV3EventsGetPageRequest {
	r.objectType = &objectType
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) EventType(eventType string) ApiGetEventsV3EventsGetPageRequest {
	r.eventType = &eventType
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) OccurredAfter(occurredAfter time.Time) ApiGetEventsV3EventsGetPageRequest {
	r.occurredAfter = &occurredAfter
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) OccurredBefore(occurredBefore time.Time) ApiGetEventsV3EventsGetPageRequest {
	r.occurredBefore = &occurredBefore
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) ObjectId(objectId int64) ApiGetEventsV3EventsGetPageRequest {
	r.objectId = &objectId
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) IndexTableName(indexTableName string) ApiGetEventsV3EventsGetPageRequest {
	r.indexTableName = &indexTableName
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) IndexSpecificMetadata(indexSpecificMetadata string) ApiGetEventsV3EventsGetPageRequest {
	r.indexSpecificMetadata = &indexSpecificMetadata
	return r
}

// The paging cursor token of the last successfully read resource will be returned as the &#x60;paging.next.after&#x60; JSON property of a paged response containing more results.
func (r ApiGetEventsV3EventsGetPageRequest) After(after string) ApiGetEventsV3EventsGetPageRequest {
	r.after = &after
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) Before(before string) ApiGetEventsV3EventsGetPageRequest {
	r.before = &before
	return r
}

// The maximum number of results to display per page.
func (r ApiGetEventsV3EventsGetPageRequest) Limit(limit int32) ApiGetEventsV3EventsGetPageRequest {
	r.limit = &limit
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) Sort(sort []string) ApiGetEventsV3EventsGetPageRequest {
	r.sort = &sort
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) ObjectPropertyPropname(objectPropertyPropname map[string]interface{}) ApiGetEventsV3EventsGetPageRequest {
	r.objectPropertyPropname = &objectPropertyPropname
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) PropertyPropname(propertyPropname map[string]interface{}) ApiGetEventsV3EventsGetPageRequest {
	r.propertyPropname = &propertyPropname
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) Id(id []string) ApiGetEventsV3EventsGetPageRequest {
	r.id = &id
	return r
}

func (r ApiGetEventsV3EventsGetPageRequest) Execute() (*CollectionResponseExternalUnifiedEvent, *http.Response, error) {
	return r.ApiService.GetEventsV3EventsGetPageExecute(r)
}

/*
GetEventsV3EventsGetPage Method for GetEventsV3EventsGetPage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEventsV3EventsGetPageRequest
*/
func (a *EventsAPIService) GetEventsV3EventsGetPage(ctx context.Context) ApiGetEventsV3EventsGetPageRequest {
	return ApiGetEventsV3EventsGetPageRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CollectionResponseExternalUnifiedEvent
func (a *EventsAPIService) GetEventsV3EventsGetPageExecute(r ApiGetEventsV3EventsGetPageRequest) (*CollectionResponseExternalUnifiedEvent, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CollectionResponseExternalUnifiedEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EventsAPIService.GetEventsV3EventsGetPage")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/events/v3/events/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.objectType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectType", r.objectType, "")
	}
	if r.eventType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "eventType", r.eventType, "")
	}
	if r.occurredAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredAfter", r.occurredAfter, "")
	}
	if r.occurredBefore != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredBefore", r.occurredBefore, "")
	}
	if r.objectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectId", r.objectId, "")
	}
	if r.indexTableName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "indexTableName", r.indexTableName, "")
	}
	if r.indexSpecificMetadata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "indexSpecificMetadata", r.indexSpecificMetadata, "")
	}
	if r.after != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "after", r.after, "")
	}
	if r.before != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "before", r.before, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.sort != nil {
		t := *r.sort
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sort", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sort", t, "multi")
		}
	}
	if r.objectPropertyPropname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "objectProperty.{propname}", r.objectPropertyPropname, "")
	}
	if r.propertyPropname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "property.{propname}", r.propertyPropname, "")
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "id", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "id", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(hubspot.ContextKey).(hubspot.Authorizer); ok {
			auth.Apply(hubspot.AuthorizationRequest{
				QueryParams: localVarQueryParams,
				FormParams:  localVarFormParams,
				Headers:     localVarHeaderParams,
			})
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v Error
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
